/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * Задачи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private OffsetDateTime time;
    private Long authorId;
    private Long executorId;
    private String title;
    private String taskText;
    private String status;
    private String priority;
    private Integer commentsCount;
    private Boolean isDeleted;

    public Task() {}

    public Task(Task value) {
        this.id = value.id;
        this.time = value.time;
        this.authorId = value.authorId;
        this.executorId = value.executorId;
        this.title = value.title;
        this.taskText = value.taskText;
        this.status = value.status;
        this.priority = value.priority;
        this.commentsCount = value.commentsCount;
        this.isDeleted = value.isDeleted;
    }

    public Task(
        Long id,
        OffsetDateTime time,
        Long authorId,
        Long executorId,
        String title,
        String taskText,
        String status,
        String priority,
        Integer commentsCount,
        Boolean isDeleted
    ) {
        this.id = id;
        this.time = time;
        this.authorId = authorId;
        this.executorId = executorId;
        this.title = title;
        this.taskText = taskText;
        this.status = status;
        this.priority = priority;
        this.commentsCount = commentsCount;
        this.isDeleted = isDeleted;
    }

    /**
     * Getter for <code>tasksystem.task.id</code>. ID задачи
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>tasksystem.task.id</code>. ID задачи
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>tasksystem.task.time</code>. Дата и время создания
     */
    public OffsetDateTime getTime() {
        return this.time;
    }

    /**
     * Setter for <code>tasksystem.task.time</code>. Дата и время создания
     */
    public void setTime(OffsetDateTime time) {
        this.time = time;
    }

    /**
     * Getter for <code>tasksystem.task.author_id</code>. Автор
     */
    public Long getAuthorId() {
        return this.authorId;
    }

    /**
     * Setter for <code>tasksystem.task.author_id</code>. Автор
     */
    public void setAuthorId(Long authorId) {
        this.authorId = authorId;
    }

    /**
     * Getter for <code>tasksystem.task.executor_id</code>. Исполнитель
     */
    public Long getExecutorId() {
        return this.executorId;
    }

    /**
     * Setter for <code>tasksystem.task.executor_id</code>. Исполнитель
     */
    public void setExecutorId(Long executorId) {
        this.executorId = executorId;
    }

    /**
     * Getter for <code>tasksystem.task.title</code>. Заголовок
     */
    public String getTitle() {
        return this.title;
    }

    /**
     * Setter for <code>tasksystem.task.title</code>. Заголовок
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Getter for <code>tasksystem.task.task_text</code>. HTML-текст задачи
     */
    public String getTaskText() {
        return this.taskText;
    }

    /**
     * Setter for <code>tasksystem.task.task_text</code>. HTML-текст задачи
     */
    public void setTaskText(String taskText) {
        this.taskText = taskText;
    }

    /**
     * Getter for <code>tasksystem.task.status</code>. Статус задачи
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>tasksystem.task.status</code>. Статус задачи
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for <code>tasksystem.task.priority</code>. Приоритет задачи
     */
    public String getPriority() {
        return this.priority;
    }

    /**
     * Setter for <code>tasksystem.task.priority</code>. Приоритет задачи
     */
    public void setPriority(String priority) {
        this.priority = priority;
    }

    /**
     * Getter for <code>tasksystem.task.comments_count</code>. Количество
     * комментариев
     */
    public Integer getCommentsCount() {
        return this.commentsCount;
    }

    /**
     * Setter for <code>tasksystem.task.comments_count</code>. Количество
     * комментариев
     */
    public void setCommentsCount(Integer commentsCount) {
        this.commentsCount = commentsCount;
    }

    /**
     * Getter for <code>tasksystem.task.is_deleted</code>. Отметка о том, что
     * задача удалена
     */
    public Boolean getIsDeleted() {
        return this.isDeleted;
    }

    /**
     * Setter for <code>tasksystem.task.is_deleted</code>. Отметка о том, что
     * задача удалена
     */
    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Task other = (Task) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.time == null) {
            if (other.time != null)
                return false;
        }
        else if (!this.time.equals(other.time))
            return false;
        if (this.authorId == null) {
            if (other.authorId != null)
                return false;
        }
        else if (!this.authorId.equals(other.authorId))
            return false;
        if (this.executorId == null) {
            if (other.executorId != null)
                return false;
        }
        else if (!this.executorId.equals(other.executorId))
            return false;
        if (this.title == null) {
            if (other.title != null)
                return false;
        }
        else if (!this.title.equals(other.title))
            return false;
        if (this.taskText == null) {
            if (other.taskText != null)
                return false;
        }
        else if (!this.taskText.equals(other.taskText))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.priority == null) {
            if (other.priority != null)
                return false;
        }
        else if (!this.priority.equals(other.priority))
            return false;
        if (this.commentsCount == null) {
            if (other.commentsCount != null)
                return false;
        }
        else if (!this.commentsCount.equals(other.commentsCount))
            return false;
        if (this.isDeleted == null) {
            if (other.isDeleted != null)
                return false;
        }
        else if (!this.isDeleted.equals(other.isDeleted))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.time == null) ? 0 : this.time.hashCode());
        result = prime * result + ((this.authorId == null) ? 0 : this.authorId.hashCode());
        result = prime * result + ((this.executorId == null) ? 0 : this.executorId.hashCode());
        result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
        result = prime * result + ((this.taskText == null) ? 0 : this.taskText.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.priority == null) ? 0 : this.priority.hashCode());
        result = prime * result + ((this.commentsCount == null) ? 0 : this.commentsCount.hashCode());
        result = prime * result + ((this.isDeleted == null) ? 0 : this.isDeleted.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Task (");

        sb.append(id);
        sb.append(", ").append(time);
        sb.append(", ").append(authorId);
        sb.append(", ").append(executorId);
        sb.append(", ").append(title);
        sb.append(", ").append(taskText);
        sb.append(", ").append(status);
        sb.append(", ").append(priority);
        sb.append(", ").append(commentsCount);
        sb.append(", ").append(isDeleted);

        sb.append(")");
        return sb.toString();
    }
}
