/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.records;


import java.time.OffsetDateTime;

import jooq.db.tables.Task;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Задачи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record10<Long, OffsetDateTime, Long, Long, String, String, String, String, Integer, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>tasksystem.task.id</code>. ID задачи
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>tasksystem.task.id</code>. ID задачи
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>tasksystem.task.time</code>. Дата и время создания
     */
    public void setTime(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>tasksystem.task.time</code>. Дата и время создания
     */
    public OffsetDateTime getTime() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>tasksystem.task.author_id</code>. Автор
     */
    public void setAuthorId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>tasksystem.task.author_id</code>. Автор
     */
    public Long getAuthorId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>tasksystem.task.executor_id</code>. Исполнитель
     */
    public void setExecutorId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>tasksystem.task.executor_id</code>. Исполнитель
     */
    public Long getExecutorId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>tasksystem.task.title</code>. Заголовок
     */
    public void setTitle(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>tasksystem.task.title</code>. Заголовок
     */
    public String getTitle() {
        return (String) get(4);
    }

    /**
     * Setter for <code>tasksystem.task.task_text</code>. HTML-текст задачи
     */
    public void setTaskText(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>tasksystem.task.task_text</code>. HTML-текст задачи
     */
    public String getTaskText() {
        return (String) get(5);
    }

    /**
     * Setter for <code>tasksystem.task.status</code>. Статус задачи
     */
    public void setStatus(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>tasksystem.task.status</code>. Статус задачи
     */
    public String getStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>tasksystem.task.priority</code>. Приоритет задачи
     */
    public void setPriority(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>tasksystem.task.priority</code>. Приоритет задачи
     */
    public String getPriority() {
        return (String) get(7);
    }

    /**
     * Setter for <code>tasksystem.task.comments_count</code>. Количество
     * комментариев
     */
    public void setCommentsCount(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>tasksystem.task.comments_count</code>. Количество
     * комментариев
     */
    public Integer getCommentsCount() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>tasksystem.task.is_deleted</code>. Отметка о том, что
     * задача удалена
     */
    public void setIsDeleted(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>tasksystem.task.is_deleted</code>. Отметка о том, что
     * задача удалена
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, OffsetDateTime, Long, Long, String, String, String, String, Integer, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, OffsetDateTime, Long, Long, String, String, String, String, Integer, Boolean> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return Task.TASK.TIME;
    }

    @Override
    public Field<Long> field3() {
        return Task.TASK.AUTHOR_ID;
    }

    @Override
    public Field<Long> field4() {
        return Task.TASK.EXECUTOR_ID;
    }

    @Override
    public Field<String> field5() {
        return Task.TASK.TITLE;
    }

    @Override
    public Field<String> field6() {
        return Task.TASK.TASK_TEXT;
    }

    @Override
    public Field<String> field7() {
        return Task.TASK.STATUS;
    }

    @Override
    public Field<String> field8() {
        return Task.TASK.PRIORITY;
    }

    @Override
    public Field<Integer> field9() {
        return Task.TASK.COMMENTS_COUNT;
    }

    @Override
    public Field<Boolean> field10() {
        return Task.TASK.IS_DELETED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public OffsetDateTime component2() {
        return getTime();
    }

    @Override
    public Long component3() {
        return getAuthorId();
    }

    @Override
    public Long component4() {
        return getExecutorId();
    }

    @Override
    public String component5() {
        return getTitle();
    }

    @Override
    public String component6() {
        return getTaskText();
    }

    @Override
    public String component7() {
        return getStatus();
    }

    @Override
    public String component8() {
        return getPriority();
    }

    @Override
    public Integer component9() {
        return getCommentsCount();
    }

    @Override
    public Boolean component10() {
        return getIsDeleted();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public OffsetDateTime value2() {
        return getTime();
    }

    @Override
    public Long value3() {
        return getAuthorId();
    }

    @Override
    public Long value4() {
        return getExecutorId();
    }

    @Override
    public String value5() {
        return getTitle();
    }

    @Override
    public String value6() {
        return getTaskText();
    }

    @Override
    public String value7() {
        return getStatus();
    }

    @Override
    public String value8() {
        return getPriority();
    }

    @Override
    public Integer value9() {
        return getCommentsCount();
    }

    @Override
    public Boolean value10() {
        return getIsDeleted();
    }

    @Override
    public TaskRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(OffsetDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public TaskRecord value3(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public TaskRecord value4(Long value) {
        setExecutorId(value);
        return this;
    }

    @Override
    public TaskRecord value5(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public TaskRecord value6(String value) {
        setTaskText(value);
        return this;
    }

    @Override
    public TaskRecord value7(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public TaskRecord value8(String value) {
        setPriority(value);
        return this;
    }

    @Override
    public TaskRecord value9(Integer value) {
        setCommentsCount(value);
        return this;
    }

    @Override
    public TaskRecord value10(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public TaskRecord values(Long value1, OffsetDateTime value2, Long value3, Long value4, String value5, String value6, String value7, String value8, Integer value9, Boolean value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Long id, OffsetDateTime time, Long authorId, Long executorId, String title, String taskText, String status, String priority, Integer commentsCount, Boolean isDeleted) {
        super(Task.TASK);

        setId(id);
        setTime(time);
        setAuthorId(authorId);
        setExecutorId(executorId);
        setTitle(title);
        setTaskText(taskText);
        setStatus(status);
        setPriority(priority);
        setCommentsCount(commentsCount);
        setIsDeleted(isDeleted);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(jooq.db.tables.pojos.Task value) {
        super(Task.TASK);

        if (value != null) {
            setId(value.getId());
            setTime(value.getTime());
            setAuthorId(value.getAuthorId());
            setExecutorId(value.getExecutorId());
            setTitle(value.getTitle());
            setTaskText(value.getTaskText());
            setStatus(value.getStatus());
            setPriority(value.getPriority());
            setCommentsCount(value.getCommentsCount());
            setIsDeleted(value.getIsDeleted());
            resetChangedOnNotNull();
        }
    }
}
