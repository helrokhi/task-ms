/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.db.Keys;
import jooq.db.Tasksystem;
import jooq.db.tables.records.TaskRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Задачи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tasksystem.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>tasksystem.task.id</code>. ID задачи
     */
    public final TableField<TaskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID задачи");

    /**
     * The column <code>tasksystem.task.time</code>. Дата и время создания
     */
    public final TableField<TaskRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Дата и время создания");

    /**
     * The column <code>tasksystem.task.author_id</code>. Автор
     */
    public final TableField<TaskRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "Автор");

    /**
     * The column <code>tasksystem.task.executor_id</code>. Исполнитель
     */
    public final TableField<TaskRecord, Long> EXECUTOR_ID = createField(DSL.name("executor_id"), SQLDataType.BIGINT.nullable(false), this, "Исполнитель");

    /**
     * The column <code>tasksystem.task.title</code>. Заголовок
     */
    public final TableField<TaskRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB, this, "Заголовок");

    /**
     * The column <code>tasksystem.task.task_text</code>. HTML-текст задачи
     */
    public final TableField<TaskRecord, String> TASK_TEXT = createField(DSL.name("task_text"), SQLDataType.CLOB, this, "HTML-текст задачи");

    /**
     * The column <code>tasksystem.task.status</code>. Статус задачи
     */
    public final TableField<TaskRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB, this, "Статус задачи");

    /**
     * The column <code>tasksystem.task.priority</code>. Приоритет задачи
     */
    public final TableField<TaskRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.CLOB, this, "Приоритет задачи");

    /**
     * The column <code>tasksystem.task.comments_count</code>. Количество
     * комментариев
     */
    public final TableField<TaskRecord, Integer> COMMENTS_COUNT = createField(DSL.name("comments_count"), SQLDataType.INTEGER, this, "Количество комментариев");

    /**
     * The column <code>tasksystem.task.is_deleted</code>. Отметка о том, что
     * задача удалена
     */
    public final TableField<TaskRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN, this, "Отметка о том, что задача удалена");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Задачи"), TableOptions.table());
    }

    /**
     * Create an aliased <code>tasksystem.task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>tasksystem.task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>tasksystem.task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tasksystem.TASKSYSTEM;
    }

    @Override
    public Identity<TaskRecord, Long> getIdentity() {
        return (Identity<TaskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.TASK_PKEY;
    }

    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK__TASK_AUTHOR_ID_USER_ID, Keys.TASK__TASK_EXECUTOR_ID_USER_ID);
    }

    private transient User _taskAuthorIdUserId;
    private transient User _taskExecutorIdUserId;

    /**
     * Get the implicit join path to the <code>tasksystem.user</code> table, via
     * the <code>task_author_id_user_id</code> key.
     */
    public User taskAuthorIdUserId() {
        if (_taskAuthorIdUserId == null)
            _taskAuthorIdUserId = new User(this, Keys.TASK__TASK_AUTHOR_ID_USER_ID);

        return _taskAuthorIdUserId;
    }

    /**
     * Get the implicit join path to the <code>tasksystem.user</code> table, via
     * the <code>task_executor_id_user_id</code> key.
     */
    public User taskExecutorIdUserId() {
        if (_taskExecutorIdUserId == null)
            _taskExecutorIdUserId = new User(this, Keys.TASK__TASK_EXECUTOR_ID_USER_ID);

        return _taskExecutorIdUserId;
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    @Override
    public Task as(Table<?> alias) {
        return new Task(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Table<?> name) {
        return new Task(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, OffsetDateTime, Long, Long, String, String, String, String, Integer, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
