/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * Комментарий к задаче
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskComment implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private OffsetDateTime time;
    private Long taskId;
    private Long authorId;
    private String commentText;
    private Boolean isDeleted;

    public TaskComment() {}

    public TaskComment(TaskComment value) {
        this.id = value.id;
        this.time = value.time;
        this.taskId = value.taskId;
        this.authorId = value.authorId;
        this.commentText = value.commentText;
        this.isDeleted = value.isDeleted;
    }

    public TaskComment(
        Long id,
        OffsetDateTime time,
        Long taskId,
        Long authorId,
        String commentText,
        Boolean isDeleted
    ) {
        this.id = id;
        this.time = time;
        this.taskId = taskId;
        this.authorId = authorId;
        this.commentText = commentText;
        this.isDeleted = isDeleted;
    }

    /**
     * Getter for <code>tasksystem.task_comment.id</code>. ID комментария
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>tasksystem.task_comment.id</code>. ID комментария
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for <code>tasksystem.task_comment.time</code>. Время отправки
     */
    public OffsetDateTime getTime() {
        return this.time;
    }

    /**
     * Setter for <code>tasksystem.task_comment.time</code>. Время отправки
     */
    public void setTime(OffsetDateTime time) {
        this.time = time;
    }

    /**
     * Getter for <code>tasksystem.task_comment.task_id</code>. ID задачи
     */
    public Long getTaskId() {
        return this.taskId;
    }

    /**
     * Setter for <code>tasksystem.task_comment.task_id</code>. ID задачи
     */
    public void setTaskId(Long taskId) {
        this.taskId = taskId;
    }

    /**
     * Getter for <code>tasksystem.task_comment.author_id</code>. Автор
     */
    public Long getAuthorId() {
        return this.authorId;
    }

    /**
     * Setter for <code>tasksystem.task_comment.author_id</code>. Автор
     */
    public void setAuthorId(Long authorId) {
        this.authorId = authorId;
    }

    /**
     * Getter for <code>tasksystem.task_comment.comment_text</code>. Текст
     * комментария
     */
    public String getCommentText() {
        return this.commentText;
    }

    /**
     * Setter for <code>tasksystem.task_comment.comment_text</code>. Текст
     * комментария
     */
    public void setCommentText(String commentText) {
        this.commentText = commentText;
    }

    /**
     * Getter for <code>tasksystem.task_comment.is_deleted</code>. Отметка о
     * том, что комментарий удален
     */
    public Boolean getIsDeleted() {
        return this.isDeleted;
    }

    /**
     * Setter for <code>tasksystem.task_comment.is_deleted</code>. Отметка о
     * том, что комментарий удален
     */
    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TaskComment other = (TaskComment) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.time == null) {
            if (other.time != null)
                return false;
        }
        else if (!this.time.equals(other.time))
            return false;
        if (this.taskId == null) {
            if (other.taskId != null)
                return false;
        }
        else if (!this.taskId.equals(other.taskId))
            return false;
        if (this.authorId == null) {
            if (other.authorId != null)
                return false;
        }
        else if (!this.authorId.equals(other.authorId))
            return false;
        if (this.commentText == null) {
            if (other.commentText != null)
                return false;
        }
        else if (!this.commentText.equals(other.commentText))
            return false;
        if (this.isDeleted == null) {
            if (other.isDeleted != null)
                return false;
        }
        else if (!this.isDeleted.equals(other.isDeleted))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.time == null) ? 0 : this.time.hashCode());
        result = prime * result + ((this.taskId == null) ? 0 : this.taskId.hashCode());
        result = prime * result + ((this.authorId == null) ? 0 : this.authorId.hashCode());
        result = prime * result + ((this.commentText == null) ? 0 : this.commentText.hashCode());
        result = prime * result + ((this.isDeleted == null) ? 0 : this.isDeleted.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TaskComment (");

        sb.append(id);
        sb.append(", ").append(time);
        sb.append(", ").append(taskId);
        sb.append(", ").append(authorId);
        sb.append(", ").append(commentText);
        sb.append(", ").append(isDeleted);

        sb.append(")");
        return sb.toString();
    }
}
