/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables.records;


import java.time.OffsetDateTime;

import jooq.db.tables.TaskComment;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Комментарий к задаче
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskCommentRecord extends UpdatableRecordImpl<TaskCommentRecord> implements Record6<Long, OffsetDateTime, Long, Long, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>tasksystem.task_comment.id</code>. ID комментария
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.id</code>. ID комментария
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>tasksystem.task_comment.time</code>. Время отправки
     */
    public void setTime(OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.time</code>. Время отправки
     */
    public OffsetDateTime getTime() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>tasksystem.task_comment.task_id</code>. ID задачи
     */
    public void setTaskId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.task_id</code>. ID задачи
     */
    public Long getTaskId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>tasksystem.task_comment.author_id</code>. Автор
     */
    public void setAuthorId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.author_id</code>. Автор
     */
    public Long getAuthorId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>tasksystem.task_comment.comment_text</code>. Текст
     * комментария
     */
    public void setCommentText(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.comment_text</code>. Текст
     * комментария
     */
    public String getCommentText() {
        return (String) get(4);
    }

    /**
     * Setter for <code>tasksystem.task_comment.is_deleted</code>. Отметка о
     * том, что комментарий удален
     */
    public void setIsDeleted(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>tasksystem.task_comment.is_deleted</code>. Отметка о
     * том, что комментарий удален
     */
    public Boolean getIsDeleted() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, OffsetDateTime, Long, Long, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, OffsetDateTime, Long, Long, String, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TaskComment.TASK_COMMENT.ID;
    }

    @Override
    public Field<OffsetDateTime> field2() {
        return TaskComment.TASK_COMMENT.TIME;
    }

    @Override
    public Field<Long> field3() {
        return TaskComment.TASK_COMMENT.TASK_ID;
    }

    @Override
    public Field<Long> field4() {
        return TaskComment.TASK_COMMENT.AUTHOR_ID;
    }

    @Override
    public Field<String> field5() {
        return TaskComment.TASK_COMMENT.COMMENT_TEXT;
    }

    @Override
    public Field<Boolean> field6() {
        return TaskComment.TASK_COMMENT.IS_DELETED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public OffsetDateTime component2() {
        return getTime();
    }

    @Override
    public Long component3() {
        return getTaskId();
    }

    @Override
    public Long component4() {
        return getAuthorId();
    }

    @Override
    public String component5() {
        return getCommentText();
    }

    @Override
    public Boolean component6() {
        return getIsDeleted();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public OffsetDateTime value2() {
        return getTime();
    }

    @Override
    public Long value3() {
        return getTaskId();
    }

    @Override
    public Long value4() {
        return getAuthorId();
    }

    @Override
    public String value5() {
        return getCommentText();
    }

    @Override
    public Boolean value6() {
        return getIsDeleted();
    }

    @Override
    public TaskCommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TaskCommentRecord value2(OffsetDateTime value) {
        setTime(value);
        return this;
    }

    @Override
    public TaskCommentRecord value3(Long value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskCommentRecord value4(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public TaskCommentRecord value5(String value) {
        setCommentText(value);
        return this;
    }

    @Override
    public TaskCommentRecord value6(Boolean value) {
        setIsDeleted(value);
        return this;
    }

    @Override
    public TaskCommentRecord values(Long value1, OffsetDateTime value2, Long value3, Long value4, String value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskCommentRecord
     */
    public TaskCommentRecord() {
        super(TaskComment.TASK_COMMENT);
    }

    /**
     * Create a detached, initialised TaskCommentRecord
     */
    public TaskCommentRecord(Long id, OffsetDateTime time, Long taskId, Long authorId, String commentText, Boolean isDeleted) {
        super(TaskComment.TASK_COMMENT);

        setId(id);
        setTime(time);
        setTaskId(taskId);
        setAuthorId(authorId);
        setCommentText(commentText);
        setIsDeleted(isDeleted);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TaskCommentRecord
     */
    public TaskCommentRecord(jooq.db.tables.pojos.TaskComment value) {
        super(TaskComment.TASK_COMMENT);

        if (value != null) {
            setId(value.getId());
            setTime(value.getTime());
            setTaskId(value.getTaskId());
            setAuthorId(value.getAuthorId());
            setCommentText(value.getCommentText());
            setIsDeleted(value.getIsDeleted());
            resetChangedOnNotNull();
        }
    }
}
