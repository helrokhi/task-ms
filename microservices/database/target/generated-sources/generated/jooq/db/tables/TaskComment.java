/*
 * This file is generated by jOOQ.
 */
package jooq.db.tables;


import java.time.OffsetDateTime;
import java.util.function.Function;

import jooq.db.Keys;
import jooq.db.Tasksystem;
import jooq.db.tables.records.TaskCommentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Комментарий к задаче
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskComment extends TableImpl<TaskCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tasksystem.task_comment</code>
     */
    public static final TaskComment TASK_COMMENT = new TaskComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskCommentRecord> getRecordType() {
        return TaskCommentRecord.class;
    }

    /**
     * The column <code>tasksystem.task_comment.id</code>. ID комментария
     */
    public final TableField<TaskCommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "ID комментария");

    /**
     * The column <code>tasksystem.task_comment.time</code>. Время отправки
     */
    public final TableField<TaskCommentRecord, OffsetDateTime> TIME = createField(DSL.name("time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Время отправки");

    /**
     * The column <code>tasksystem.task_comment.task_id</code>. ID задачи
     */
    public final TableField<TaskCommentRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT, this, "ID задачи");

    /**
     * The column <code>tasksystem.task_comment.author_id</code>. Автор
     */
    public final TableField<TaskCommentRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.BIGINT, this, "Автор");

    /**
     * The column <code>tasksystem.task_comment.comment_text</code>. Текст
     * комментария
     */
    public final TableField<TaskCommentRecord, String> COMMENT_TEXT = createField(DSL.name("comment_text"), SQLDataType.CLOB, this, "Текст комментария");

    /**
     * The column <code>tasksystem.task_comment.is_deleted</code>. Отметка о
     * том, что комментарий удален
     */
    public final TableField<TaskCommentRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN, this, "Отметка о том, что комментарий удален");

    private TaskComment(Name alias, Table<TaskCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskComment(Name alias, Table<TaskCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Комментарий к задаче"), TableOptions.table());
    }

    /**
     * Create an aliased <code>tasksystem.task_comment</code> table reference
     */
    public TaskComment(String alias) {
        this(DSL.name(alias), TASK_COMMENT);
    }

    /**
     * Create an aliased <code>tasksystem.task_comment</code> table reference
     */
    public TaskComment(Name alias) {
        this(alias, TASK_COMMENT);
    }

    /**
     * Create a <code>tasksystem.task_comment</code> table reference
     */
    public TaskComment() {
        this(DSL.name("task_comment"), null);
    }

    public <O extends Record> TaskComment(Table<O> child, ForeignKey<O, TaskCommentRecord> key) {
        super(child, key, TASK_COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tasksystem.TASKSYSTEM;
    }

    @Override
    public Identity<TaskCommentRecord, Long> getIdentity() {
        return (Identity<TaskCommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskCommentRecord> getPrimaryKey() {
        return Keys.TASK_COMMENT_PK;
    }

    @Override
    public TaskComment as(String alias) {
        return new TaskComment(DSL.name(alias), this);
    }

    @Override
    public TaskComment as(Name alias) {
        return new TaskComment(alias, this);
    }

    @Override
    public TaskComment as(Table<?> alias) {
        return new TaskComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskComment rename(String name) {
        return new TaskComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskComment rename(Name name) {
        return new TaskComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskComment rename(Table<?> name) {
        return new TaskComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, OffsetDateTime, Long, Long, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super OffsetDateTime, ? super Long, ? super Long, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
